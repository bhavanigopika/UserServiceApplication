spring.application.name=UserServiceApplication

#to trace the log
#logging.level.org.springframework=TRACE
#logging.level.org.springframework.security.*=trace
#logging.level.org.springframework.web.*=trace

spring.jpa.hibernate.ddl-auto=update

spring.datasource.url=jdbc:mysql://localhost:3306/userserviceapplication1
#To upload our project into amazon
#spring.datasource.url=jdbc:mysql://productservicedec2024.c3muygwyeupu.us-east-1.rds.amazonaws.com:3306/productservicedec2024
spring.datasource.username=userserviceapplicationuser1
#spring.datasource.password=secret

#spring.datasource.url=${PRODUCT_SERVICE_DB_URL}
#spring.datasource.username=${PRODUCT_SERVICE_DB_USER}
#spring.datasource.password=${PRODUCT_SERVICE_DB_PASSWORD}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#any query that hibernate doing internally, then show me the sql query that you are writing for that
spring.jpa.show-sql: true

#Usually it runs in 8080 what we did in db connection. If we want to change the server then use the following line
#now, let's mark server port as like environment variables "server.port=${USER_SERVICE_PORT}" to understand ServiceDiscovery/Eureka Server.
#server.port=8081
server.port=${USER_SERVICE_PORT}

#make user service as client so register with eureka
#Why eureka.client register with eureka=true because it is specifically for client. So, client(say, client for payment service is user service , so
#make user service is true for eureka to register. So, user service can make entire server as IP mapping) want to register with eureka. Now, make it true
eureka.client.register-with-eureka=true
#Why eureka.client fetch with registry=true because this user service going to fetch registry. Fetch registry something for the clients(It may be product service,
#user service, tracking service...)
eureka.client.fetch-registry=true